
Tasarım yaparken dikket etmen gereken hususlar;
 -tasarımlarda tailwindcss kullan.
 -tasarımlarında daisyui kullanabilirsin.

vue dosyasına kod yazarken dikkat etmen gereken hususla;
- Yeni oluşturduğun vue dosyasının iç yapısı aşağıdaki gibi olsun.
 -- <template>
 -- <script setup>
    -- önemli: views/tablo/components/from içinde bulunan componentlerde <script> yapısını kullan. 
 -- <style scoped> 



projede kullanılan sayfalama mantığını aşağıdaki gibidir.
- Oluşturulan tabloların sayfaları src/views klasöründe bulunur.
- src/views altında bulunan tablolar src/router sayfasında router olarak ulaşılabilir hale gelir.
- src/views/tablo klasöründe bulunan sayfaların görevleri aşağıdaki gibidir.
    - Home.vue -> tablo için ana sayfa, genelde dashboard olarak kullanılır.
    - Create.vue -> tablo için veri ekleme sayfası
    - Update.vue -> tablo için veri güncelleme sayfası
    - Detail.vue -> tablo için veri detay sayfası
    - List.vue -> tablo için veri listeleme sayfası
    - Search.vue -> tablo için veri arama sayfası
    - Bu sayfalar içinde kullanılan componentler tablo/components klasöründe bulunur.

- sistemde opsiyon olarak iki adet backend mevcuttur ve bunları seçebiliyoyrum.
    -- backend servisler json-server ve pocketbase ile çalışır.
    -- varsayılan backend json-server ile çalışır.


- tablolar için eklediğin componentlere api den veri çekme işlemleri aşağıdaki gibidir;
    - api istekleri;
        - json-server için src/services/json-services/GlobalServices.js dosyasında yapılır.
        - pocketbase için src/services/pocketbase-services/pocketbase.js dosyasında yapılır.
    - var sayılan olarak kullanılan api istekleri aşağıdaki gibidir.
        - getItems: tüm verileri çeker.
        - getItem: tek bir veriyi çeker.
        - addItem: yeni bir veri ekler.
        - updateItem: mevcut bir veriyi günceller.
        - deleteItem: mevcut bir veriyi siler.
        - searchItems: arama yapılır.

    - src/views/tablo altında bulunan componentlerde api istekleri doğrudan çağrılmaz. 
    - api istekleri src/compositions/useModelTablo.js dosyasında bulunan fonksiyonlar ile yapılır.
    - "src/compositions/useModelTablo.js" dosyasındaki mevcut fonksiyonlar aşağıdaki gibidir;
        - getItems: tüm verileri çeker.
        - getItem: tek bir veriyi çeker.
        - addItem: yeni bir veri ekler.
        - updateItem: mevcut bir veriyi günceller.
        - deleteItem: mevcut bir veriyi siler.
        - searchItems: arama yapılır.

    - varsayılan olarak kullanılan api isteklerinin dışında yeni bir api isteği oluşturmak istediğin zaman; 
        - src/services/json-services/GlobalServices.js dosyasında yeni bir fonksiyon oluştur.
        - src/services/pocketbase-services/pocketbase.js dosyasında yeni bir fonksiyon oluştur.
        - oluşturduğun api isteğini "src/compositions/useModelTablo.js" dosyası araclığı ile src/views/tablo klasöründe bulunan componentlerde kullan.

    - api isteklerinin src/views/tablo klasöründe bulunan componentlerde kullanım örneği aşağıdaki gibidir;
       
        import useSchema from "../../compositions/useModelSchema";
        const { loading: schemaLoading, data: schemaData, error: schemaError, getItem: getSchema, confirmDelete: deleteSchema } = useSchema();

- src/utils klasöründe bulunan dosyalar;
    - roles.js -> rol bilgilerini ve üyelerin, adminlerin ve kullanıcıların hangi routerlere erişebildiği bilgilerini tutar.
    - direction.js -> router bilgilerini kullanarak ilgili sayfadaki menü, header ve footer ların gösterilip gösterilmeyeceğini belirler. 

-yeni bir router eklediğin zaman;
 -- utils/direction.js dosyasında eklediğin yolun menü, header ve footer bilgilerini eklemelisin.
 -- utils/roles.js dosyasına eklediğin yolun rol bilgilerini eklemelisin. (örneğin: UserHome: [1, 2, 3] gibi)   



